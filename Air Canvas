import numpy as np
import cv2
from collections import deque

def handleTrackbar(x):
    print("")

cv2.namedWindow("Color detectors")
cv2.createTrackbar("Upper Hue", "Color detectors", 153, 180, handleTrackbar)
cv2.createTrackbar("Upper Saturation", "Color detectors", 255, 255, handleTrackbar)
cv2.createTrackbar("Upper Value", "Color detectors", 255, 255, handleTrackbar)
cv2.createTrackbar("Lower Hue", "Color detectors", 64, 180, handleTrackbar)
cv2.createTrackbar("Lower Saturation", "Color detectors", 72, 255, handleTrackbar)
cv2.createTrackbar("Lower Value", "Color detectors", 49, 255, handleTrackbar)

blue_points = [deque(maxlen=1024)]
green_points = [deque(maxlen=1024)]
red_points = [deque(maxlen=1024)]
yellow_points = [deque(maxlen=1024)]

blue_index = 0
green_index = 0
red_index = 0
yellow_index = 0

kernel = np.ones((5, 5), np.uint8)

ink_colors = [(255, 0, 0), (0, 255, 0), (0, 0, 255), (0, 255, 255)]
color_index = 0

canvas = np.zeros((471, 636, 3)) + 255
cv2.namedWindow('Paint', cv2.WINDOW_AUTOSIZE)

cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()
    frame = cv2.flip(frame, 1)
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    u_hue = cv2.getTrackbarPos("Upper Hue", "Color detectors")
    u_saturation = cv2.getTrackbarPos("Upper Saturation", "Color detectors")
    u_value = cv2.getTrackbarPos("Upper Value", "Color detectors")
    l_hue = cv2.getTrackbarPos("Lower Hue", "Color detectors")
    l_saturation = cv2.getTrackbarPos("Lower Saturation", "Color detectors")
    l_value = cv2.getTrackbarPos("Lower Value", "Color detectors")
    upper_hsv = np.array([u_hue, u_saturation, u_value])
    lower_hsv = np.array([l_hue, l_saturation, l_value])

    frame = cv2.rectangle(frame, (40, 1), (140, 65), (122, 122, 122), -1)
    frame = cv2.rectangle(frame, (160, 1), (255, 65), ink_colors[0], -1)
    frame = cv2.rectangle(frame, (275, 1), (370, 65), ink_colors[1], -1)
    frame = cv2.rectangle(frame, (390, 1), (485, 65), ink_colors[2], -1)
    frame = cv2.rectangle(frame, (505, 1), (600, 65), ink_colors[3], -1)

    cv2.putText(frame, "CLEAR ALL", (49, 33), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2, cv2.LINE_AA)
    cv2.putText(frame, "BLUE", (185, 33), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2, cv2.LINE_AA)
    cv2.putText(frame, "GREEN", (298, 33), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2, cv2.LINE_AA)
    cv2.putText(frame, "RED", (420, 33), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2, cv2.LINE_AA)
    cv2.putText(frame, "YELLOW", (520, 33), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (150, 150, 150), 2, cv2.LINE_AA)

    mask = cv2.inRange(hsv, lower_hsv, upper_hsv)
    mask = cv2.erode(mask, kernel, iterations=1)
    mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)
    mask = cv2.dilate(mask, kernel, iterations=1)

    contours, _ = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    pointer_center = None

    if len(contours) > 0:
        contour = sorted(contours, key=cv2.contourArea, reverse=True)[0]
        (x, y), radius = cv2.minEnclosingCircle(contour)
        cv2.circle(frame, (int(x), int(y)), int(radius), (0, 255, 255), 2)
        moments = cv2.moments(contour)
        pointer_center = (int(moments['m10'] / moments['m00']), int(moments['m01'] / moments['m00']))

        if pointer_center[1] <= 65:
            if 40 <= pointer_center[0] <= 140:
                blue_points = [deque(maxlen=512)]
                green_points = [deque(maxlen=512)]
                red_points = [deque(maxlen=512)]
                yellow_points = [deque(maxlen=512)]

                blue_index = 0
                green_index = 0
                red_index = 0
                yellow_index = 0

                canvas[67:, :, :] = 255
            elif 160 <= pointer_center[0] <= 255:
                color_index = 0
            elif 275 <= pointer_center[0] <= 370:
                color_index = 1
            elif 390 <= pointer_center[0] <= 485:
                color_index = 2
            elif 505 <= pointer_center[0] <= 600:
                color_index = 3
        else:
            if color_index == 0:
                blue_points[blue_index].appendleft(pointer_center)
            elif color_index == 1:
                green_points[green_index].appendleft(pointer_center)
            elif color_index == 2:
                red_points[red_index].appendleft(pointer_center)
            elif color_index == 3:
                yellow_points[yellow_index].appendleft(pointer_center)
    else:
        blue_points.append(deque(maxlen=512))
        blue_index += 1
        green_points.append(deque(maxlen=512))
        green_index += 1
        red_points.append(deque(maxlen=512))
        red_index += 1
        yellow_points.append(deque(maxlen=512))
        yellow_index += 1

    all_points = [blue_points, green_points, red_points, yellow_points]
    for i in range(len(all_points)):
        for j in range(len(all_points[i])):
            for k in range(1, len(all_points
